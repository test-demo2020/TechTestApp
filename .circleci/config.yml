# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    working_directory: /go/src/github.com/servian/TechTestApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

      - add_ssh_keys:
          fingerprints:
              - "90:d3:be:73:40:1a:f2:8f:ea:d9:a3:88:4b:63:63:75"
      - run: echo $REMOTE_HOSTKEY >> ~/.ssh/known_hosts


  deploy:
    working_directory: /go/src/github.com/servian/TechTestApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            mkdir -p output
            go build -v -o TechTestApp .
            ls
            ./TechTestApp --version | sed -e 's/TechTestApp version /v./' > versionfile

      - run: 

          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
            
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -v -o TechTestApp .
            
            cp TechTestApp dist/
            cp -r assets dist/
            cp conf.toml dist/
            
            rm TechTestApp
            export version=$(cat versionfile)
            
            zip -r "output/TechTestApp_${version}_linux64.zip" dist/*

             ssh $SSH_USER@$SSH_HOST "ls /opt/"
            
      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr
              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi


      - store_artifacts:
          path: output
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
